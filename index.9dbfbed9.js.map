{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,E,I,A,W,M,A,U,wI,G,C,S,E,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,CCMA,IAAM,EAAS,SAAS,aAAa,CAAC,WAChC,EAAW,SAAS,gBAAgB,CAAC,YACrC,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAW,SAAS,aAAa,CAAC,cAuWxC,SAAS,EAAiB,CAAG,CAAE,CAAG,EAChC,OAAO,KAAK,KAAK,CAAC,KAAK,MAAM,GAAM,CAAA,EAAM,EAAM,CAAA,GAAM,CACvD,CAEA,SAAS,EAAW,CAAK,EACvB,OAAO,EAAM,MAAM,CAAC,SAAC,CAArB,EAA8B,OAAA,AAAS,IAAT,C,EAChC,CAEA,SAAS,EAAS,CAAK,EACrB,OAAO,EAAM,GAAG,CAAC,SAAC,CAAlB,EAA2B,OAAA,EAAG,E,EAChC,CAZA,AARa,GA3Vb,CAAA,e,EAAM,SAAA,EACQ,CAAsB,CAAE,CAAc,EAApC,IAAG,EAAL,EAAE,CAAA,CAAU,EAAZ,EAAY,CAAV,EADV,A,S,C,C,C,E,G,C,C,a,C,E,M,A,U,oC,EAAA,IAAA,CAAA,GAEF,IAAI,CAAC,IAAI,CAAG,CACV,EAAG,EACH,EAAG,CACL,EACA,IAAI,CAAC,WAAW,CAAG,EACnB,IAAI,CAAC,IAAI,CAAG,AAAI,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,EAEjC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAE,IACpC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,AAAI,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,EAE7C,CAAA,IAAI,CAAC,cAAc,CAAG,IAAI,CA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\nvar button = document.querySelector(\".button\");\nvar messages = document.querySelectorAll(\".message\");\nvar tbody = document.querySelector(\"tbody\");\nvar fieldRow = document.querySelector(\".field-row\");\nvar Game = /*#__PURE__*/ function() {\n    function Game(param, controlButtons) {\n        var sizeX = param.x, sizeY = param.y;\n        _class_call_check(this, Game);\n        this.size = {\n            x: sizeX,\n            y: sizeY\n        };\n        this.controlBtns = controlButtons;\n        this.grid = new Array(this.size.y);\n        for(var i = 0; i < this.grid.length; i++)this.grid[i] = new Array(this.size.x).fill(0);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n        this.handlers = [];\n        this.score = 0;\n    }\n    _create_class(Game, [\n        {\n            key: \"addRandomCell\",\n            value: function addRandomCell() {\n                var amount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n                for(var i = 0; i < amount; i++){\n                    var yAble = this.grid.map(function(item, index) {\n                        return item.includes(0) ? index : undefined;\n                    }).filter(function(index) {\n                        return index !== undefined;\n                    });\n                    // includes array with indexes of rows that have `0`,\n                    // otherwise undefined\n                    if (yAble.length === 0) return;\n                    // check undefined\n                    var selectRow = yAble[getRandomInteger(0, yAble.length - 1)];\n                    var xAble = this.grid[selectRow].map(function(item, index) {\n                        return !item ? index : undefined;\n                    }).filter(function(index) {\n                        return index !== undefined;\n                    });\n                    // includes array with indexes of columns\n                    // in the specific row that have `0`,\n                    // otherwise undefined\n                    if (xAble.length === 0) return;\n                    // check undefined\n                    var selectColumn = xAble[getRandomInteger(0, xAble.length - 1)];\n                    if (getRandomInteger(1, 10) === 10) this.grid[selectRow][selectColumn] += 4;\n                    else this.grid[selectRow][selectColumn] += 2;\n                // add appear random 4 by 10%, otherwise 2\n                }\n            }\n        },\n        {\n            key: \"removeCell\",\n            value: function removeCell(x, y) {\n                var _this = this;\n                if (typeof x !== \"number\" || typeof y !== \"number\") this.grid = new Array(this.size.y).fill(0).map(function() {\n                    return new Array(_this.size.x).fill(0);\n                });\n                else this.grid[y][x] = 0;\n                this.render();\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this = this;\n                this.grid.forEach(function(row, rowIndex) {\n                    var rowElement = document.querySelector(\"tbody .field-row:nth-child(\".concat(rowIndex + 1, \")\"));\n                    _this.grid[rowIndex].forEach(function(column, columnIndex) {\n                        var columnElement = rowElement.querySelector(\".field-cell:nth-child(\".concat(columnIndex + 1, \")\"));\n                        columnElement.classList.value = \"field-cell field-cell--\".concat(column);\n                        if (column) columnElement.textContent = column;\n                        else columnElement.textContent = \"\";\n                        _this.checkWin(column);\n                        _this.checkLose();\n                    });\n                });\n            }\n        },\n        {\n            key: \"renderScore\",\n            value: function renderScore() {\n                var num = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n                this.score += num;\n                var gameScore = document.querySelector(\".game-score\");\n                gameScore.textContent = this.score;\n            }\n        },\n        {\n            key: \"combineAdjacentDuplicates\",\n            value: function combineAdjacentDuplicates(array) {\n                var isMove = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n                var nums = filterZero(array);\n                var totalScore = 0;\n                for(var i = 0; i < nums.length - 1; i++){\n                    var firstNum = nums[i];\n                    var secondNum = nums[i + 1];\n                    if (firstNum === secondNum) {\n                        nums[i] += secondNum;\n                        nums[i + 1] = 0;\n                        totalScore += nums[i];\n                    }\n                }\n                if (isMove) this.renderScore(totalScore);\n                return filterZero(nums);\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin(item) {\n                if (item >= 2048) {\n                    var messageWin = document.querySelector(\".message-win\");\n                    messageWin.classList.remove(\"hidden\");\n                    this.removeAllEventListeners();\n                }\n            }\n        },\n        {\n            key: \"checkLose\",\n            value: function checkLose() {\n                var _this = this, _loop = function(i) {\n                    var array = [];\n                    _this.grid.forEach(function(row) {\n                        array.push(row[i]);\n                    });\n                    var resultArray = _this.combineAdjacentDuplicates(array);\n                    if (JSON.stringify(resultArray).length === JSON.stringify(array).length) lose -= 1;\n                };\n                var _this1 = this;\n                var messageLose = document.querySelector(\".message-lose\");\n                var lose = this.size.x + this.size.y;\n                this.grid.forEach(function(row) {\n                    if (JSON.stringify(_this1.combineAdjacentDuplicates(row)).length === JSON.stringify(row).length) lose -= 1;\n                });\n                for(var i = 0; i < this.size.x; i++)_loop(i);\n                if (lose <= 0) {\n                    this.removeAllEventListeners();\n                    messageLose.classList.remove(\"hidden\");\n                }\n            }\n        },\n        {\n            key: \"removeAllEventListeners\",\n            value: function removeAllEventListeners() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.handlers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var _step_value = _step.value, eventHandler = _step_value.eventHandler, handler = _step_value.handler;\n                        document.removeEventListener(eventHandler, handler);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                this.handlers = [];\n            }\n        },\n        {\n            key: \"setupRestartButton\",\n            value: function setupRestartButton(buttonElement) {\n                var _this = this;\n                buttonElement.addEventListener(\"click\", function() {\n                    _this.restartGame();\n                });\n            }\n        },\n        {\n            key: \"setupControlButtons\",\n            value: function setupControlButtons(buttons) {\n                var _this = this;\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    var _this1 = this, _loop = function() {\n                        var group = _step.value;\n                        var handler = function(e) {\n                            return _this.handleKeyPress(e, group);\n                        };\n                        document.addEventListener(\"keydown\", handler);\n                        _this1.handlers.push({\n                            eventHandler: \"keydown\",\n                            handler: handler\n                        });\n                    };\n                    for(var _iterator = buttons[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"handleKeyPress\",\n            value: function handleKeyPress(e, group) {\n                var _group = _sliced_to_array(group, 4), left = _group[0], up = _group[1], right = _group[2], down = _group[3];\n                switch(e.key){\n                    case left:\n                        this.moveLeft();\n                        break;\n                    case up:\n                        this.moveUp();\n                        break;\n                    case right:\n                        this.moveRight();\n                        break;\n                    case down:\n                        this.moveDown();\n                        break;\n                }\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                var check = deepCopy(this.grid);\n                this.grid.forEach(function(row, rowIndex) {\n                    var _this_grid_rowIndex;\n                    var resultArray = _this.combineAdjacentDuplicates(row, true);\n                    (_this_grid_rowIndex = _this.grid[rowIndex]).unshift.apply(_this_grid_rowIndex, _to_consumable_array(resultArray));\n                    _this.grid[rowIndex].length = _this.size.x;\n                    _this.grid[rowIndex].fill(0, resultArray.length);\n                });\n                if (JSON.stringify(check) !== JSON.stringify(this.grid)) this.addRandomCell(1);\n                this.render();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(i) {\n                    var array = [];\n                    _this.grid.forEach(function(row) {\n                        array.push(row[i]);\n                    });\n                    var resultArray = _this.combineAdjacentDuplicates(array, true);\n                    if (resultArray.length !== _this.size.y) {\n                        var resultArrayLength = resultArray.length;\n                        resultArray.length = _this.size.y;\n                        resultArray.fill(0, resultArrayLength);\n                    }\n                    _this.grid.forEach(function(row, index) {\n                        _this1.grid[index][i] = resultArray[index];\n                    });\n                };\n                var _this1 = this;\n                var check = deepCopy(this.grid);\n                for(var i = 0; i < this.size.x; i++)_loop(i);\n                if (JSON.stringify(check) !== JSON.stringify(this.grid)) this.addRandomCell(1);\n                this.render();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                var check = deepCopy(this.grid);\n                this.grid.forEach(function(row, rowIndex) {\n                    var _this_grid_rowIndex;\n                    var resultArray = _this.combineAdjacentDuplicates(row.slice().reverse(), true);\n                    (_this_grid_rowIndex = _this.grid[rowIndex]).unshift.apply(_this_grid_rowIndex, _to_consumable_array(resultArray));\n                    _this.grid[rowIndex].length = _this.size.x;\n                    _this.grid[rowIndex].fill(0, resultArray.length);\n                    if (JSON.stringify(row) !== JSON.stringify(resultArray.reverse())) _this.grid[rowIndex].reverse();\n                });\n                if (JSON.stringify(check) !== JSON.stringify(this.grid)) this.addRandomCell(1);\n                this.render();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(i) {\n                    var array = [];\n                    _this.grid.forEach(function(row) {\n                        array.push(row[i]);\n                    });\n                    var resultArray = _this.combineAdjacentDuplicates(array.slice().reverse(), true).reverse();\n                    if (resultArray.length !== _this.size.y) {\n                        var _resultArray;\n                        var lengthToAdd = _this.size.y - resultArray.length;\n                        (_resultArray = resultArray).unshift.apply(_resultArray, _to_consumable_array(new Array(lengthToAdd).fill(0)));\n                        _this.grid.forEach(function(row, index) {\n                            _this1.grid[index][i] = resultArray[index];\n                        });\n                    }\n                };\n                var _this1 = this;\n                var check = deepCopy(this.grid);\n                for(var i = 0; i < this.size.x; i++)_loop(i);\n                if (JSON.stringify(check) !== JSON.stringify(this.grid)) this.addRandomCell(1);\n                this.render();\n            }\n        },\n        {\n            key: \"restartGame\",\n            value: function restartGame() {\n                button.textContent = \"Restart\";\n                button.classList.remove(\"start\");\n                button.classList.add(\"restart\");\n                messages.forEach(function(message) {\n                    if (!message.classList.contains(\"hidden\")) message.classList.add(\"hidden\");\n                });\n                this.removeCell();\n                this.addRandomCell(2);\n                this.render();\n                this.removeAllEventListeners();\n                this.setupControlButtons(this.controlBtns);\n                this.score = 0;\n                this.renderScore();\n            }\n        },\n        {\n            key: \"gridState\",\n            value: function gridState() {\n                window.console.log(this.grid);\n            }\n        }\n    ]);\n    return Game;\n}();\nvar btns = [\n    [\n        \"a\",\n        \"w\",\n        \"d\",\n        \"s\"\n    ],\n    [\n        \"ArrowLeft\",\n        \"ArrowUp\",\n        \"ArrowRight\",\n        \"ArrowDown\"\n    ]\n];\nvar game = new Game({\n    x: fieldRow.childElementCount,\n    y: tbody.childElementCount\n}, btns);\ngame.setupRestartButton(button);\nfunction getRandomInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction filterZero(array) {\n    return array.filter(function(item) {\n        return item !== 0;\n    });\n}\nfunction deepCopy(array) {\n    return array.map(function(row) {\n        return _to_consumable_array(row);\n    });\n}\n\n//# sourceMappingURL=index.9dbfbed9.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\n\nconst button = document.querySelector('.button');\nconst messages = document.querySelectorAll('.message');\nconst tbody = document.querySelector('tbody');\nconst fieldRow = document.querySelector('.field-row');\n\nclass Game {\n  constructor({ x: sizeX, y: sizeY }, controlButtons) {\n    this.size = {\n      x: sizeX,\n      y: sizeY,\n    };\n    this.controlBtns = controlButtons;\n    this.grid = new Array(this.size.y);\n\n    for (let i = 0; i < this.grid.length; i++) {\n      this.grid[i] = new Array(this.size.x).fill(0);\n    }\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handlers = [];\n    this.score = 0;\n  }\n\n  addRandomCell(amount = 1) {\n    for (let i = 0; i < amount; i++) {\n      const yAble = this.grid\n        .map((item, index) => (item.includes(0) ? index : undefined))\n        .filter((index) => index !== undefined);\n      // includes array with indexes of rows that have `0`,\n      // otherwise undefined\n\n      if (yAble.length === 0) {\n        return;\n      }\n      // check undefined\n\n      const selectRow = yAble[getRandomInteger(0, yAble.length - 1)];\n      const xAble = this.grid[selectRow]\n        .map((item, index) => (!item ? index : undefined))\n        .filter((index) => index !== undefined);\n      // includes array with indexes of columns\n      // in the specific row that have `0`,\n      // otherwise undefined\n\n      if (xAble.length === 0) {\n        return;\n      }\n      // check undefined\n\n      const selectColumn = xAble[getRandomInteger(0, xAble.length - 1)];\n\n      if (getRandomInteger(1, 10) === 10) {\n        this.grid[selectRow][selectColumn] += 4;\n      } else {\n        this.grid[selectRow][selectColumn] += 2;\n      }\n      // add appear random 4 by 10%, otherwise 2\n    }\n  }\n\n  removeCell(x, y) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n      this.grid = new Array(this.size.y).fill(0).map(() => {\n        return new Array(this.size.x).fill(0);\n      });\n    } else {\n      this.grid[y][x] = 0;\n    }\n\n    this.render();\n  }\n\n  render() {\n    this.grid.forEach((row, rowIndex) => {\n      const rowElement = document.querySelector(\n        `tbody .field-row:nth-child(${rowIndex + 1})`,\n      );\n\n      this.grid[rowIndex].forEach((column, columnIndex) => {\n        const columnElement = rowElement.querySelector(\n          `.field-cell:nth-child(${columnIndex + 1})`,\n        );\n\n        columnElement.classList.value = `field-cell field-cell--${column}`;\n\n        if (column) {\n          columnElement.textContent = column;\n        } else {\n          columnElement.textContent = '';\n        }\n\n        this.checkWin(column);\n        this.checkLose();\n      });\n    });\n  }\n\n  renderScore(num = 0) {\n    this.score += num;\n\n    const gameScore = document.querySelector('.game-score');\n\n    gameScore.textContent = this.score;\n  }\n\n  combineAdjacentDuplicates(array, isMove = false) {\n    const nums = filterZero(array);\n    let totalScore = 0;\n\n    for (let i = 0; i < nums.length - 1; i++) {\n      const firstNum = nums[i];\n      const secondNum = nums[i + 1];\n\n      if (firstNum === secondNum) {\n        nums[i] += secondNum;\n        nums[i + 1] = 0;\n        totalScore += nums[i];\n      }\n    }\n\n    if (isMove) {\n      this.renderScore(totalScore);\n    }\n\n    return filterZero(nums);\n  }\n\n  checkWin(item) {\n    if (item >= 2048) {\n      const messageWin = document.querySelector('.message-win');\n\n      messageWin.classList.remove('hidden');\n      this.removeAllEventListeners();\n    }\n  }\n\n  checkLose() {\n    const messageLose = document.querySelector('.message-lose');\n    let lose = this.size.x + this.size.y;\n\n    this.grid.forEach((row) => {\n      if (\n        JSON.stringify(this.combineAdjacentDuplicates(row)).length ===\n        JSON.stringify(row).length\n      ) {\n        lose -= 1;\n      }\n    });\n\n    for (let i = 0; i < this.size.x; i++) {\n      const array = [];\n\n      this.grid.forEach((row) => {\n        array.push(row[i]);\n      });\n\n      const resultArray = this.combineAdjacentDuplicates(array);\n\n      if (JSON.stringify(resultArray).length === JSON.stringify(array).length) {\n        lose -= 1;\n      }\n    }\n\n    if (lose <= 0) {\n      this.removeAllEventListeners();\n\n      messageLose.classList.remove('hidden');\n    }\n  }\n\n  removeAllEventListeners() {\n    for (const { eventHandler, handler } of this.handlers) {\n      document.removeEventListener(eventHandler, handler);\n    }\n\n    this.handlers = [];\n  }\n\n  setupRestartButton(buttonElement) {\n    buttonElement.addEventListener('click', () => {\n      this.restartGame();\n    });\n  }\n\n  setupControlButtons(buttons) {\n    for (const group of buttons) {\n      const handler = (e) => this.handleKeyPress(e, group);\n\n      document.addEventListener('keydown', handler);\n\n      this.handlers.push({\n        eventHandler: 'keydown',\n        handler,\n      });\n    }\n  }\n\n  handleKeyPress(e, group) {\n    const [left, up, right, down] = group;\n\n    switch (e.key) {\n      case left:\n        this.moveLeft();\n        break;\n\n      case up:\n        this.moveUp();\n        break;\n\n      case right:\n        this.moveRight();\n        break;\n\n      case down:\n        this.moveDown();\n        break;\n    }\n  }\n\n  moveLeft() {\n    const check = deepCopy(this.grid);\n\n    this.grid.forEach((row, rowIndex) => {\n      const resultArray = this.combineAdjacentDuplicates(row, true);\n\n      this.grid[rowIndex].unshift(...resultArray);\n      this.grid[rowIndex].length = this.size.x;\n      this.grid[rowIndex].fill(0, resultArray.length);\n    });\n\n    if (JSON.stringify(check) !== JSON.stringify(this.grid)) {\n      this.addRandomCell(1);\n    }\n    this.render();\n  }\n\n  moveUp() {\n    const check = deepCopy(this.grid);\n\n    for (let i = 0; i < this.size.x; i++) {\n      const array = [];\n\n      this.grid.forEach((row) => {\n        array.push(row[i]);\n      });\n\n      const resultArray = this.combineAdjacentDuplicates(array, true);\n\n      if (resultArray.length !== this.size.y) {\n        const resultArrayLength = resultArray.length;\n\n        resultArray.length = this.size.y;\n\n        resultArray.fill(0, resultArrayLength);\n      }\n\n      this.grid.forEach((row, index) => {\n        this.grid[index][i] = resultArray[index];\n      });\n    }\n\n    if (JSON.stringify(check) !== JSON.stringify(this.grid)) {\n      this.addRandomCell(1);\n    }\n    this.render();\n  }\n\n  moveRight() {\n    const check = deepCopy(this.grid);\n\n    this.grid.forEach((row, rowIndex) => {\n      const resultArray = this.combineAdjacentDuplicates(\n        row.slice().reverse(),\n        true,\n      );\n\n      this.grid[rowIndex].unshift(...resultArray);\n      this.grid[rowIndex].length = this.size.x;\n      this.grid[rowIndex].fill(0, resultArray.length);\n\n      if (JSON.stringify(row) !== JSON.stringify(resultArray.reverse())) {\n        this.grid[rowIndex].reverse();\n      }\n    });\n\n    if (JSON.stringify(check) !== JSON.stringify(this.grid)) {\n      this.addRandomCell(1);\n    }\n    this.render();\n  }\n\n  moveDown() {\n    const check = deepCopy(this.grid);\n\n    for (let i = 0; i < this.size.x; i++) {\n      const array = [];\n\n      this.grid.forEach((row) => {\n        array.push(row[i]);\n      });\n\n      const resultArray = this.combineAdjacentDuplicates(\n        array.slice().reverse(),\n        true,\n      ).reverse();\n\n      if (resultArray.length !== this.size.y) {\n        const lengthToAdd = this.size.y - resultArray.length;\n\n        resultArray.unshift(...new Array(lengthToAdd).fill(0));\n\n        this.grid.forEach((row, index) => {\n          this.grid[index][i] = resultArray[index];\n        });\n      }\n    }\n\n    if (JSON.stringify(check) !== JSON.stringify(this.grid)) {\n      this.addRandomCell(1);\n    }\n    this.render();\n  }\n\n  restartGame() {\n    button.textContent = 'Restart';\n    button.classList.remove('start');\n    button.classList.add('restart');\n\n    messages.forEach((message) => {\n      if (!message.classList.contains('hidden')) {\n        message.classList.add('hidden');\n      }\n    });\n\n    this.removeCell();\n    this.addRandomCell(2);\n    this.render();\n    this.removeAllEventListeners();\n    this.setupControlButtons(this.controlBtns);\n    this.score = 0;\n    this.renderScore();\n  }\n\n  gridState() {\n    window.console.log(this.grid);\n  }\n}\n\nconst btns = [\n  ['a', 'w', 'd', 's'],\n  ['ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown'],\n];\n\nconst game = new Game(\n  {\n    x: fieldRow.childElementCount,\n    y: tbody.childElementCount,\n  },\n  btns,\n);\n\ngame.setupRestartButton(button);\n\nfunction getRandomInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction filterZero(array) {\n  return array.filter((item) => item !== 0);\n}\n\nfunction deepCopy(array) {\n  return array.map((row) => [...row]);\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","_non_iterable_spread","TypeError","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","button","document","querySelector","messages","querySelectorAll","tbody","fieldRow","getRandomInteger","min","max","Math","floor","random","filterZero","array","filter","item","deepCopy","map","row","game","protoProps","Game","param","controlButtons","sizeX","x","sizeY","y","_class_call_check","instance","Constructor","size","controlBtns","grid","fill","handleKeyPress","bind","handlers","score","key","value","amount","arguments","yAble","index","includes","undefined","selectRow","xAble","selectColumn","_this","render","forEach","rowIndex","rowElement","concat","column","columnIndex","columnElement","classList","textContent","checkWin","checkLose","num","gameScore","isMove","nums","totalScore","firstNum","secondNum","renderScore","messageWin","remove","removeAllEventListeners","_loop","push","JSON","stringify","combineAdjacentDuplicates","lose","_this1","messageLose","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_step_value","eventHandler","handler","removeEventListener","err","return","buttonElement","addEventListener","restartGame","buttons","group","e","_group","_array_with_holes","_iterable_to_array_limit","_s","_e","_i","_arr","_n","_d","_non_iterable_rest","left","up","right","down","moveLeft","moveUp","moveRight","moveDown","check","_this_grid_rowIndex","resultArray","unshift","apply","addRandomCell","resultArrayLength","reverse","lengthToAdd","add","message","contains","removeCell","setupControlButtons","window","console","log","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","childElementCount","setupRestartButton"],"version":3,"file":"index.9dbfbed9.js.map"}